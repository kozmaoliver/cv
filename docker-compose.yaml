networks:
    proxy:
        name: ${COMPOSE_PROJECT_NAME}-proxy
        driver: bridge

volumes:
    database_data:

services:
    traefik:
        image: traefik:3.3.4
        container_name: ${COMPOSE_PROJECT_NAME}-traefik
        restart: unless-stopped
        command:
            # Default
            - "--serverstransport.insecureskipverify=true"
            # Configuration
            - "--ping"
            # Api
            - "--api.insecure=true"
            - "--api.dashboard=true"
            # Log
            - "--log.level=INFO"
            - "--log.filePath=/dev/stdout"
            - "--log.format=json"
            # Access Log
            - "--accesslog.addInternals=true"
            - "--accesslog.filepath=/dev/stdout"
            - "--accesslog.format=json"
            # Providers
            - "--providers.docker=true"
            - "--providers.docker.network=${COMPOSE_PROJECT_NAME}_proxy"
            - "--providers.docker.exposedbydefault=false"
            - "--providers.file.directory=/configuration/"
            - "--providers.file.watch=true"
            # Entry points
            - "--entrypoints.web.address=:80"
            - "--entrypoints.web.http.redirections.entrypoint.to=websecure"
            - "--entrypoints.web.http.redirections.entrypoint.scheme=https"
            - "--entrypoints.websecure.address=:443"
            - "--entrypoints.postgres.address=:5432"
        labels:
            - traefik.enable=true
            - traefik.port=8080
            - traefik.http.routers.${COMPOSE_PROJECT_NAME}-traefik.rule=Host(`traefik.cv.localhost`)
            - traefik.http.routers.${COMPOSE_PROJECT_NAME}-traefik.entryPoints=websecure
            - traefik.http.routers.${COMPOSE_PROJECT_NAME}-traefik.tls=true
            - traefik.http.routers.${COMPOSE_PROJECT_NAME}-traefik.service=api@internal
        ports:
            - "127.0.0.1:80:80"
            - "127.0.0.1:8080:8080"
            - "127.0.0.1:443:443/tcp"
            - "127.0.0.1:443:443/udp"
        networks:
            - proxy
        volumes:
            - /var/run/docker.sock:/var/run/docker.sock:ro
            - ./certs/:/certs/:ro

    php:
        container_name: ${COMPOSE_PROJECT_NAME}-php
        build:
            context: docker/php
        restart: always
        working_dir: /var/www/html
        networks:
            - proxy
        volumes:
            - .:/var/www/html
        depends_on:
            - postgres

    nginx:
        container_name: ${COMPOSE_PROJECT_NAME}-nginx
        build:
            context: docker/nginx
        restart: always
        labels:
            - traefik.enable=true
            - traefik.http.routers.${COMPOSE_PROJECT_NAME}-nginx.rule=Host(`app.cv.localhost`)
            - traefik.http.routers.${COMPOSE_PROJECT_NAME}-nginx.entryPoints=websecure
            - traefik.http.routers.${COMPOSE_PROJECT_NAME}-nginx.tls=true
            - traefik.http.services.${COMPOSE_PROJECT_NAME}-nginx.loadbalancer.server.port=80
        networks:
            - proxy
        volumes:
            - .:/var/www/html
        depends_on:
            - php

    postgres:
        container_name: ${COMPOSE_PROJECT_NAME}-postgres
        image: bitnami/postgresql:16.2.0
        restart: always
        environment:
            POSTGRESQL_USER: ${PROJECT_USER}
            POSTGRESQL_PASSWORD: ${PROJECT_PASSWORD}
            POSTGRESQL_POSTGRES_PASSWORD: ${PROJECT_PASSWORD}
            POSTGRESQL_DATABASE: ${PROJECT_DATABASE}
        networks:
            - proxy
        ports:
            - "5432:5432"
        volumes:
            - database_data:/var/lib/postgresql/data
