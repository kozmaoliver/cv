security:
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        users:
            entity:
                class: App\Entity\User\User
                property: email
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false

        cms:
            pattern: ^/cms
            lazy: true
            provider: users
            form_login:
                post_only: true
                form_only: true
                login_path: app_cms_auth_login
                check_path: app_cms_auth_login
                default_target_path: app_cms_show_two_factor_form
                enable_csrf: true
                csrf_parameter: _csrf_token
                csrf_token_id: authenticate
            login_throttling:
                limiter: app.security.default_login_rate_limiter
            logout:
                path: app_cms_auth_logout
                target: app_cms_auth_show_login_form
                enable_csrf: true
                csrf_parameter: token
                csrf_token_manager: security.csrf.token_manager
                delete_cookies: true
                invalidate_session: true
                clear_site_data: "*"

#            api:
#                pattern: /api
#                lazy: true
#                stateless: true

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        - { attributes: { _route: app_cms_auth_logout }, roles: PUBLIC_ACCESS }
        - { attributes: { _route: app_cms_auth_show_login_form }, roles: PUBLIC_ACCESS }
        - { attributes: { _route: app_cms_show_two_factor_form }, roles: IS_AUTHENTICATED_2FA_IN_PROGRESS }
        - { path: ^/cms/, roles: ROLE_ADMIN }

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
